		# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
		# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
		# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.



import sys
file, time_hours, cost_hour, prize = sys.argv
salary = float(time_hours) * float(cost_hour) + float(prize)
print(f"Зарплата сотрудника : {salary}")








		# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
		# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
		# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
		# Результат: [12, 44, 4, 10, 78, 123].

my_list = [15, 2, 3, 1, 7, 5, 4, 10]

new_list = [el for num, el in enumerate(my_list) if my_list[num - 1] < my_list[num]  ]
print(my_list)
print(new_list)








		# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
		# Подсказка: использовать функцию range() и генератор.

my_list = [x for x in range(20, 240) if x % 20 == 0 or x % 21 == 0]
print(my_list)







		# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
		# Сформировать итоговый массив чисел, соответствующих требованию.
		# Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
		# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
		# Результат: [23, 1, 3, 10, 4, 11]

llist = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
my_list = [x for x in llist if llist.count(x) == 1]
print(my_list)








		# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
		# В список должны войти четные числа от 100 до 1000 (включая границы).
		# Необходимо получить результат вычисления произведения всех элементов списка.
		# Подсказка: использовать функцию reduce().


from functools import reduce

values = [x for x in range(100, 1001, 2)]
print(values)

		# Вариант 1
# def func(a, b):
#     return a * b
# print(reduce(func, values))

		#Вариант 2

result = reduce(lambda a, b: a * b, values)
print(result)







		# 6. Реализовать два небольших скрипта:
		# а) итератор, генерирующий целые числа, начиная с указанного,
		# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
		#
		# Подсказка: использовать функцию count() и cycle() модуля itertools.
		#     Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
		#
		# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
		#     Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.


		# Скрипт а

from itertools import count
from itertools import cycle
for x in count(3):
    if x > 10:
        break
    print(x)

		# Скрипт б

		#Вариант 1:  Выводит весь список с новой строки

# users = ["Mike", "Kate", "Nick", "Artur"]
# iter = 0
# for user in cycle(users):
#     iter += 1
#     if iter > 10:
#         break
#     print(users)


		#Вариант 2: Выводит каждое имя с новой строки

users = ["Mike", "Kate", "Nick", "Artur"]
y = 0
for x in cycle(users):
    if y > 10:
        break
    y += 1
    print(x)





		# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
		# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
		# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
		# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from itertools import count
from math import factorial

def fact():
    for el in count(1):
        yield factorial(el)

g = fact()
x = 0
for val in g:
    if x < 3:
        print(val)
        x += 1
    else:
        break


