'''
		1. Создать класс TrafficLight (светофор) и определить у него один атрибут color (цвет) и метод running (запуск).
		 Атрибут реализовать как приватный. В рамках метода реализовать переключение светофора в режимы: красный, желтый, зеленый.
		 Продолжительность первого состояния (красный) составляет 7 сек, вундторого (желтый) — 2 секунды, третьего (зеленый) — на ваше усмотрение.
 		Переключение между режимами должно осуществляться только в указанном порядке (красный, желтый, зеленый).
 		 Проверить работу примера, создав экземпляр и вызвав описанный метод.
 		 Задачу можно усложнить, реализовав проверку порядка режимов, и при его нарушении выводить соответствующее сообщение и завершать скрипт.
'''

from time import sleep

class TrafficLight:
    __color = ["Red", "Yellow", "Green"]

    def running(self):

        x = 0
        while x < 3:
            if x == 0:
                print(TrafficLight.__color[0])
                x += 1
                sleep(7)
            if x == 1:
                print(TrafficLight.__color[1])
                sleep(2)
                x += 1
            if x == 2:
                print(TrafficLight.__color[2])
                sleep(3)
                x = 0



result = TrafficLight()
result.running()








'''
		2. Реализовать класс Road (дорога), в котором определить атрибуты: length (длина), width (ширина).
 		Значения данных атрибутов должны передаваться при создании экземпляра класса. Атрибуты сделать защищенными.
 		Определить метод расчета массы асфальта, необходимого для покрытия всего дорожного полотна.
 		Использовать формулу: длина*ширина*масса асфальта для покрытия одного кв метра дороги асфальтом, толщиной в 1 см*число см толщины полотна.
 		 Проверить работу метода.
Например: 20м*5000м*25кг*5см = 12500 т
'''

class Road:
    _mass: float = 25.0
    _length: float
    _width: float
    def __init__(self, length: float, width: float):
        self._length = length
        self._width = width

    def result(self, sm: float = 1):
        return (self._length * self._width * self._mass * sm) / 1000

asfalt = Road(20, 5000)
itog = asfalt.result(5)
print(itog)







'''
		3. Реализовать базовый класс Worker (работник), в котором определить атрибуты: name, surname, position (должность), income (доход).
		 Последний атрибут должен быть защищенным и ссылаться на словарь, содержащий элементы: оклад и премия, например, {"wage": wage, "bonus": bonus}.
		  Создать класс Position (должность) на базе класса Worker.
		  В классе Position реализовать методы получения полного имени сотрудника (get_full_name) и дохода с учетом премии (get_total_income).
		   Проверить работу примера на реальных данных (создать экземпляры класса Position, передать данные, проверить значения атрибутов, вызвать методы экземпляров).
'''




class Worker:
    name: str
    surname: str
    position: str
    _income: dict
    def __init__(self, name, surname, position, wage, bonus):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {"wage": wage, "bonus": bonus}


class Position(Worker):
    def fullname(self):
        return f"{self.name} {self.surname}"

    def get_total_income(self):
        return self._income.get("wage") + self._income.get("bonus")


sotrudnik = Position("Roman", "Prihodko", "Engineer", 100000, 20000)
print(sotrudnik.fullname(), sotrudnik.get_total_income())

sotrudnik2 = Position("Igor", "Yrgant", "DevOps", 80000, 30000)
print(sotrudnik2.fullname(), sotrudnik2.get_total_income())








'''
		4.Реализуйте базовый класс Car. У данного класса должны быть следующие атрибуты: speed, color, name, is_police (булево).
		 А также методы: go, stop, turn(direction), которые должны сообщать, что машина поехала, остановилась, повернула (куда).
 		 Опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar.
 		 Добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля.
  		Для классов TownCar и WorkCar переопределите метод show_speed.
  		При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.

		Создайте экземпляры классов, передайте значения атрибутов. Выполните доступ к атрибутам, выведите результат.
		Выполните вызов методов и также покажите результат.
'''

class Car:
    speed: int
    color: str
    name: str
    is_police: bool = False

    def __init__(self, speed, color, name):
        self.speed = speed
        self.color = color
        self.name = name


    def go(self):
        print(f"Машина {self.name} поехала")

    def stop(self):
        print(f"Машина  остановилась\n")

    def turn(self, povorot):
        print(f"Машина повернула : {povorot}")




    def show_speed(self):
        print(f"Скорость :{self.speed}")


class TownCar(Car):

    def show_speed(self):
        if self.speed > 60:
            print("Превышение скорости")
        else:
            print(f"Скорость : {self.speed}")


class SportCar(Car):
    pass

class WorkCar(Car):
    def show_speed(self):
        if self.speed > 40:
            print("Превышение скорости")
        else:
            print(f"Скорость : {self.speed}")


class PoliceCar(Car):
    is_police: bool = True


audi = TownCar(40, "Yellow", "Audi")
audi.go()
audi.turn("налево")
audi.show_speed()
audi.stop()

mazda = SportCar(200, "Red", "Mazda")
mazda.go()
mazda.turn("направо")
mazda.show_speed()
mazda.stop()

bmw = WorkCar(100, "Black", "BMW")
bmw.go()
bmw.turn("налево")
bmw.show_speed()
bmw.stop()

volvo = PoliceCar(180, "White", "Volvo")
volvo.go()
volvo.turn("направо")
volvo.show_speed()
volvo.stop()








'''
		5. Реализовать класс Stationery (канцелярская принадлежность).
		Определить в нем атрибут title (название) и метод draw (отрисовка).
 		Метод выводит сообщение “Запуск отрисовки.” Создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер).
 		 В каждом из классов реализовать переопределение метода draw. Для каждого из классов метод должен выводить уникальное сообщение.
 		  Создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.
'''

class Stationery:
    title: str
    draw = "Запуск отрисовки"
    def start_draw(self):
        print(self.draw)


class Pen(Stationery):
    title = "Pen"
    draw = f"{title} это ручка"



class Pencil(Stationery):
    title = "Pecil"
    draw = f"{title} это карандаш"


class Handle(Stationery):
    title = "Pen"
    draw = f"{title} это маркер"


obj1 = Pen()
obj2 = Pencil()
obj3 = Handle()

obj1.start_draw()
obj2.start_draw()
obj3.start_draw()

